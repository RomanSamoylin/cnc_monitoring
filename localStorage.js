// localStorage.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–Ω–∫–æ–≤
// –í–µ—Ä—Å–∏—è 4.0 - –° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_CONFIG = {
    APP_NAME: 'CNCMonitoring',
    API_BASE_URL: 'http://localhost:3004/api',
    ENDPOINTS: {
        SETTINGS: '/settings',
        SAVE_SETTINGS: '/settings/save',
        IMPORT_SETTINGS: '/settings/import',
        BACKUPS: '/settings/backups',
        RESTORE: '/settings/restore',
        HEALTH: '/health',
        DISTRIBUTION: '/settings/distribution',
        WORKSHOPS: '/settings/workshops',
        STATS: '/settings/stats',
        DEBUG: '/settings/debug',
        DEBUG_DETAILED: '/settings/debug-detailed',
        VERIFY: '/settings/verify',
        REFRESH: '/settings/refresh',
        QUICK_DISTRIBUTION: '/settings/quick-distribution',
        CURRENT: '/settings/current'
    },
    SESSION_TIMEOUT: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
    MAX_LOGIN_ATTEMPTS: 5,
    LOCKOUT_TIME: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    DEFAULT_REQUEST_HEADERS: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    },
    STORAGE_KEYS: {
        SETTINGS: 'settings',
        LAST_UPDATE: 'lastUpdate',
        SERVER_STATUS: 'serverStatus',
        CACHE_TIMESTAMP: 'cacheTimestamp',
        WORKSHOPS_CACHE: 'workshopsCache',
        MACHINES_CACHE: 'machinesCache'
    }
};

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const StorageManager = {
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    getItem: function(key) {
        try {
            const fullKey = `${APP_CONFIG.APP_NAME}_${key}`;
            const item = localStorage.getItem(fullKey);
            
            if (!item) {
                console.log(`üì¶ StorageManager: –∫–ª—é—á "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return null;
            }

            const data = JSON.parse(item);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            if (data.expires && Date.now() > data.expires) {
                console.log(`üïí StorageManager: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ "${key}" —É—Å—Ç–∞—Ä–µ–ª–∏`);
                this.removeItem(key);
                return null;
            }
            
            console.log(`üì¶ StorageManager: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ "${key}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã`, {
                size: JSON.stringify(data.value).length,
                hasValue: !!data.value,
                timestamp: new Date(data.timestamp).toLocaleString()
            });
            
            return data.value;
        } catch (e) {
            console.error(`‚ùå StorageManager.getItem error for key "${key}":`, e);
            this.removeItem(key); // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return null;
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
    setItem: function(key, value, ttl = null) {
        try {
            const fullKey = `${APP_CONFIG.APP_NAME}_${key}`;
            const item = {
                value: value,
                timestamp: Date.now()
            };

            if (ttl) {
                item.expires = Date.now() + ttl;
            }

            localStorage.setItem(fullKey, JSON.stringify(item));
            
            console.log(`üíæ StorageManager: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ "${key}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`, {
                size: JSON.stringify(value).length,
                ttl: ttl ? `${ttl / 1000} —Å–µ–∫` : '–Ω–µ—Ç',
                valueType: Array.isArray(value) ? `–º–∞—Å—Å–∏–≤[${value.length}]` : typeof value
            });
            
            return true;
        } catch (e) {
            console.error(`‚ùå StorageManager.setItem error for key "${key}":`, e);
            return false;
        }
    },

    // –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    removeItem: function(key) {
        try {
            const fullKey = `${APP_CONFIG.APP_NAME}_${key}`;
            localStorage.removeItem(fullKey);
            console.log(`üóëÔ∏è StorageManager: –∫–ª—é—á "${key}" —É–¥–∞–ª–µ–Ω`);
            return true;
        } catch (e) {
            console.error(`‚ùå StorageManager.removeItem error for key "${key}":`, e);
            return false;
        }
    },

    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    clearAll: function() {
        try {
            const keys = this.getAllKeys();
            keys.forEach(key => {
                localStorage.removeItem(key);
            });
            console.log(`üßπ StorageManager: –æ—á–∏—â–µ–Ω–æ ${keys.length} –∫–ª—é—á–µ–π`);
            return true;
        } catch (e) {
            console.error('‚ùå StorageManager.clearAll error:', e);
            return false;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    getAllKeys: function() {
        try {
            const keys = Object.keys(localStorage).filter(key => 
                key.startsWith(APP_CONFIG.APP_NAME)
            );
            console.log(`üîë StorageManager: –Ω–∞–π–¥–µ–Ω–æ ${keys.length} –∫–ª—é—á–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è`);
            return keys;
        } catch (e) {
            console.error('‚ùå StorageManager.getAllKeys error:', e);
            return [];
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
    hasItem: function(key) {
        const exists = localStorage.getItem(`${APP_CONFIG.APP_NAME}_${key}`) !== null;
        console.log(`‚ùì StorageManager: –∫–ª—é—á "${key}" ${exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
        return exists;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    getStorageInfo: function() {
        try {
            const keys = this.getAllKeys();
            let totalSize = 0;
            const info = {};

            keys.forEach(key => {
                const value = localStorage.getItem(key);
                const size = value ? new Blob([value]).size : 0;
                totalSize += size;
                
                const shortKey = key.replace(`${APP_CONFIG.APP_NAME}_`, '');
                info[shortKey] = {
                    size: size,
                    sizeFormatted: this._formatBytes(size),
                    value: value ? JSON.parse(value) : null
                };
            });

            return {
                totalKeys: keys.length,
                totalSize: totalSize,
                totalSizeFormatted: this._formatBytes(totalSize),
                keys: info
            };
        } catch (e) {
            console.error('‚ùå StorageManager.getStorageInfo error:', e);
            return null;
        }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–æ–≤
    _formatBytes: function(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
};

// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SettingsApiClient = {
    // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    request: async function(endpoint, method = 'GET', data = null, options = {}) {
        const url = APP_CONFIG.API_BASE_URL + endpoint;
        const requestOptions = {
            method: method,
            headers: { ...APP_CONFIG.DEFAULT_REQUEST_HEADERS, ...options.headers },
            credentials: 'include',
            timeout: options.timeout || 30000
        };

        if (data && (method === 'POST' || method === 'PUT')) {
            requestOptions.body = JSON.stringify(data);
        }

        try {
            console.log(`üåê API Request: ${method} ${endpoint}`, data ? { dataSize: JSON.stringify(data).length } : '');
            
            const startTime = Date.now();
            const response = await fetch(url, requestOptions);
            const responseTime = Date.now() - startTime;
            
            if (!response.ok) {
                const errorText = await response.text();
                let errorData;
                try {
                    errorData = JSON.parse(errorText);
                } catch {
                    errorData = { message: errorText || `HTTP error! status: ${response.status}` };
                }
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            const responseData = await response.json();
            console.log(`‚úÖ API Response: ${endpoint}`, {
                success: responseData.success,
                responseTime: `${responseTime}ms`,
                dataSize: JSON.stringify(responseData).length
            });
            
            return responseData;

        } catch (error) {
            console.error(`‚ùå API Request failed: ${method} ${endpoint}`, {
                error: error.message,
                url: url
            });
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    getSettings: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.SETTINGS);
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    saveSettings: async function(settings) {
        return await this.request(APP_CONFIG.ENDPOINTS.SAVE_SETTINGS, 'POST', { settings });
    },

    // –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    importSettings: async function(settings) {
        return await this.request(APP_CONFIG.ENDPOINTS.IMPORT_SETTINGS, 'POST', { settings });
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    getBackups: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.BACKUPS);
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    restoreFromBackup: async function(filename) {
        return await this.request(APP_CONFIG.ENDPOINTS.RESTORE, 'POST', { filename });
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    checkHealth: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.HEALTH);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    getDistribution: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.DISTRIBUTION);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ—Ö–æ–≤
    getWorkshops: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.WORKSHOPS);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    getStats: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.STATS);
    },

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    debugDatabase: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.DEBUG);
    },

    // –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    debugDatabaseDetailed: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.DEBUG_DETAILED);
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    verifyData: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.VERIFY);
    },

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    refreshData: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.REFRESH, 'POST');
    },

    // –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    getQuickDistribution: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.QUICK_DISTRIBUTION);
    },

    // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    getCurrentSettings: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.CURRENT);
    }
};

// –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const SettingsManager = {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑ –∫—ç—à–∞
    loadSettings: async function() {
        try {
            console.log('üîÑ –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await SettingsApiClient.getSettings();
            
            if (response.success && response.settings) {
                console.log('‚úÖ –î–ê–ù–ù–´–ï –° –°–ï–†–í–ï–†–ê:', {
                    workshops: response.settings.workshops.length,
                    machines: response.settings.machines.length,
                    workshopsList: response.settings.workshops.map(w => `${w.name}(id:${w.id})`)
                });
                
                // –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                const validatedSettings = this._validateAndFixSettings(response.settings);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SETTINGS, validatedSettings, APP_CONFIG.SESSION_TIMEOUT);
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.LAST_UPDATE, new Date().toISOString());
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS, 'connected');
                
                console.log('üíæ –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–´ –í –ö–≠–®:', {
                    workshops: validatedSettings.workshops.length,
                    machines: validatedSettings.machines.length
                });
                
                return validatedSettings;
            } else {
                throw new Error('Invalid server response');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ù–ê–°–¢–†–û–ï–ö –° –°–ï–†–í–ï–†–ê:', error);
            
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            const cachedSettings = StorageManager.getItem(APP_CONFIG.STORAGE_KEYS.SETTINGS);
            if (cachedSettings) {
                console.log('üì¶ –ó–ê–ì–†–£–ó–ö–ê –ò–ó –ö–≠–®–ê:', {
                    workshops: cachedSettings.workshops.length,
                    machines: cachedSettings.machines.length
                });
                
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS, 'cached');
                return cachedSettings;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('‚öôÔ∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ');
            StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS, 'default');
            return this.getDefaultSettings();
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    saveSettings: async function(settings) {
        try {
            console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ù–ê–°–¢–†–û–ï–ö:', {
                workshops: settings.workshops.length,
                machines: settings.machines.length,
                workshopsList: settings.workshops.map(w => `${w.name}(id:${w.id})`)
            });
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            const validatedSettings = this._validateAndFixSettings(settings);
            
            const response = await SettingsApiClient.saveSettings(validatedSettings);
            
            if (response.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SETTINGS, validatedSettings, APP_CONFIG.SESSION_TIMEOUT);
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.LAST_UPDATE, new Date().toISOString());
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS, 'connected');
                
                console.log('‚úÖ –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–´:', {
                    workshops: validatedSettings.workshops.length,
                    machines: validatedSettings.machines.length
                });
                
                return {
                    success: true,
                    settings: validatedSettings
                };
            } else {
                throw new Error(response.message || 'Save failed');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö:', error);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
            StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SETTINGS, settings, APP_CONFIG.SESSION_TIMEOUT);
            StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.LAST_UPDATE, new Date().toISOString());
            StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS, 'offline');
            
            throw error;
        }
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    _validateAndFixSettings: function(settings) {
        console.log('üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ù–ê–°–¢–†–û–ï–ö...');
        
        const fixedSettings = {
            workshops: [],
            machines: []
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ—Ö–æ–≤
        if (settings.workshops && Array.isArray(settings.workshops)) {
            fixedSettings.workshops = settings.workshops.map(workshop => ({
                id: workshop.id || this._generateId(),
                name: workshop.name || `–¶–ï–•-${workshop.id || this._generateId()}`,
                machinesCount: workshop.machinesCount || 0
            }));
            console.log(`‚úÖ –¶–µ—Ö–æ–≤ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${fixedSettings.workshops.length}`);
        } else {
            console.warn('‚ö†Ô∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ workshops, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            fixedSettings.workshops = [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }];
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–Ω–∫–æ–≤
        if (settings.machines && Array.isArray(settings.machines)) {
            fixedSettings.machines = settings.machines.map(machine => ({
                id: machine.id || this._generateId(),
                name: machine.name || `–°—Ç–∞–Ω–æ–∫-${machine.id || this._generateId()}`,
                workshopId: machine.workshopId || 1
            }));
            console.log(`‚úÖ –°—Ç–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${fixedSettings.machines.length}`);
        } else {
            console.warn('‚ö†Ô∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ machines, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            fixedSettings.machines = [];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Ü–µ—Ö–∞—Ö
        this._updateWorkshopsMachinesCount(fixedSettings);

        console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:', {
            workshops: fixedSettings.workshops.length,
            machines: fixedSettings.machines.length
        });

        return fixedSettings;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Ü–µ—Ö–∞—Ö
    _updateWorkshopsMachinesCount: function(settings) {
        settings.workshops.forEach(workshop => {
            workshop.machinesCount = settings.machines.filter(m => m.workshopId === workshop.id).length;
        });
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
    _generateId: function() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    getDefaultSettings: function() {
        return {
            workshops: [
                { 
                    id: 1, 
                    name: "–¶–ï–•-1", 
                    machinesCount: 0 
                }
            ],
            machines: []
        };
    },

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    getLastUpdate: function() {
        return StorageManager.getItem(APP_CONFIG.STORAGE_KEYS.LAST_UPDATE);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    getServerStatus: function() {
        return StorageManager.getItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS) || 'unknown';
    },

    // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
    clearCache: function() {
        StorageManager.removeItem(APP_CONFIG.STORAGE_KEYS.SETTINGS);
        StorageManager.removeItem(APP_CONFIG.STORAGE_KEYS.LAST_UPDATE);
        StorageManager.removeItem(APP_CONFIG.STORAGE_KEYS.SERVER_STATUS);
        console.log('üßπ –ö–≠–® –ù–ê–°–¢–†–û–ï–ö –û–ß–ò–©–ï–ù');
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    verifyDataIntegrity: async function() {
        try {
            const response = await SettingsApiClient.verifyData();
            
            if (response.success) {
                console.log('üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:', response.analysis);
                return response;
            } else {
                throw new Error('Data verification failed');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:', error);
            throw error;
        }
    },

    // –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    deepDebug: async function() {
        try {
            const response = await SettingsApiClient.debugDatabaseDetailed();
            
            if (response.success) {
                console.log('üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:', response);
                return response;
            } else {
                throw new Error('Deep debug failed');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
            throw error;
        }
    },

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ—Ö–æ–≤
    forceReloadWorkshops: async function() {
        try {
            const response = await SettingsApiClient.getWorkshops();
            
            if (response.success && response.workshops) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ü–µ—Ö–æ–≤
                const currentSettings = StorageManager.getItem(APP_CONFIG.STORAGE_KEYS.SETTINGS) || this.getDefaultSettings();
                currentSettings.workshops = response.workshops;
                
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.SETTINGS, currentSettings, APP_CONFIG.SESSION_TIMEOUT);
                StorageManager.setItem(APP_CONFIG.STORAGE_KEYS.LAST_UPDATE, new Date().toISOString());
                
                console.log('‚úÖ –¶–ï–•–ò –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ï–ù–´:', response.workshops.length);
                return response.workshops;
            } else {
                throw new Error('Workshops reload failed');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –¶–ï–•–û–í:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    getStorageInfo: function() {
        return StorageManager.getStorageInfo();
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
const UIManager = {
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification: function(message, type = 'info', duration = 4000) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let notificationContainer = document.getElementById('notificationContainer');
        if (!notificationContainer) {
            notificationContainer = document.createElement('div');
            notificationContainer.id = 'notificationContainer';
            notificationContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
            `;
            document.body.appendChild(notificationContainer);
        }

        const notification = document.createElement('div');
        const types = {
            success: { bg: '#2ecc71', icon: 'fa-check' },
            error: { bg: '#e74c3c', icon: 'fa-exclamation-circle' },
            warning: { bg: '#f39c12', icon: 'fa-exclamation-triangle' },
            info: { bg: '#3498db', icon: 'fa-info-circle' }
        };

        const config = types[type] || types.info;

        notification.innerHTML = `
            <div style="
                background: ${config.bg};
                color: white;
                padding: 12px 16px;
                margin-bottom: 10px;
                border-radius: 4px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                display: flex;
                align-items: center;
                gap: 10px;
                animation: slideIn 0.3s ease-out;
            ">
                <i class="fas ${config.icon}" style="font-size: 16px;"></i>
                <span>${message}</span>
            </div>
        `;

        notificationContainer.appendChild(notification);

        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]: ${message}`);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, duration);

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!document.getElementById('notificationStyles')) {
            const style = document.createElement('style');
            style.id = 'notificationStyles';
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError: function(message, duration = 5000) {
        this.showNotification(message, 'error', duration);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
    showSuccess: function(message, duration = 3000) {
        this.showNotification(message, 'success', duration);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    showInfo: function(message, duration = 4000) {
        this.showNotification(message, 'info', duration);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    showStorageInfo: function() {
        const info = StorageManager.getStorageInfo();
        if (!info) {
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            return;
        }

        let message = `üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –•–†–ê–ù–ò–õ–ò–©–ï:\n\n`;
        message += `–í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${info.totalKeys}\n`;
        message += `–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${info.totalSizeFormatted}\n\n`;
        
        Object.keys(info.keys).forEach(key => {
            const keyInfo = info.keys[key];
            message += `${key}: ${keyInfo.sizeFormatted}\n`;
        });

        alert(message);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppInitializer = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    initialize: async function() {
        try {
            console.log('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
            const healthResponse = await SettingsApiClient.checkHealth();
            const isServerHealthy = healthResponse.success && healthResponse.database === 'connected';

            if (!isServerHealthy) {
                console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
                UIManager.showInfo('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = await SettingsManager.loadSettings();
            
            console.log('‚úÖ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–û:', {
                server: isServerHealthy ? 'online' : 'offline',
                workshops: settings.workshops.length,
                machines: settings.machines.length,
                serverStatus: SettingsManager.getServerStatus()
            });

            return {
                settings: settings,
                serverStatus: isServerHealthy ? 'online' : 'offline',
                storageStatus: SettingsManager.getServerStatus(),
                lastUpdate: SettingsManager.getLastUpdate()
            };

        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:', error);
            UIManager.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                settings: SettingsManager.getDefaultSettings(),
                serverStatus: 'error',
                storageStatus: 'error',
                lastUpdate: null
            };
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    checkDatabaseState: async function() {
        try {
            console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–î...');
            
            const debugResponse = await SettingsApiClient.debugDatabase();
            
            if (debugResponse.success) {
                const debugInfo = debugResponse.debug;
                const latest = debugInfo.latest_settings;
                
                console.log('üìä –°–û–°–¢–û–Ø–ù–ò–ï –ë–î:', debugInfo);
                
                return {
                    success: true,
                    workshops: latest.workshops_count,
                    machines: latest.machines_count,
                    distribution: debugInfo.distribution_count,
                    totalMachines: debugInfo.machines_count,
                    workshopsList: latest.workshops_list
                };
            } else {
                throw new Error(debugResponse.message || 'Debug request failed');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø –ë–î:', error);
            UIManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î: ' + error.message);
            
            return {
                success: false,
                error: error.message
            };
        }
    },

    // –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    deepDiagnostics: async function() {
        try {
            console.log('üîç –ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...');
            
            const debugResponse = await SettingsManager.deepDebug();
            
            if (debugResponse.success) {
                const storageInfo = StorageManager.getStorageInfo();
                
                console.log('üìä –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
                
                return {
                    server: debugResponse,
                    storage: storageInfo,
                    settings: StorageManager.getItem(APP_CONFIG.STORAGE_KEYS.SETTINGS)
                };
            } else {
                throw new Error('Deep diagnostics failed');
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
            throw error;
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.CNCMonitoring = {
    // API
    api: SettingsApiClient,
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ
    storage: StorageManager,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settings: SettingsManager,
    
    // UI
    ui: UIManager,
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init: AppInitializer.initialize,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    checkDB: AppInitializer.checkDatabaseState,
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    deepDiagnostics: AppInitializer.deepDiagnostics,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    verifyData: SettingsManager.verifyDataIntegrity,
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ—Ö–æ–≤
    reloadWorkshops: SettingsManager.forceReloadWorkshops,
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storageInfo: SettingsManager.getStorageInfo,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    utils: {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        formatFileSize: function(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        },
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        formatDate: function(dateString) {
            return new Date(dateString).toLocaleString('ru-RU');
        },
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        generateId: function() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        },
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        showStorageInfo: function() {
            UIManager.showStorageInfo();
        }
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const appState = await window.CNCMonitoring.init();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        window.dispatchEvent(new CustomEvent('appInitialized', {
            detail: appState
        }));
        
        console.log('üéâ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï', appState);
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error);
        window.CNCMonitoring.ui.showError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        StorageManager,
        SettingsApiClient,
        SettingsManager,
        UIManager,
        AppInitializer,
        APP_CONFIG
    };
}