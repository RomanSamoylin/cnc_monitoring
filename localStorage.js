// localStorage.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–Ω–∫–æ–≤
// –í–µ—Ä—Å–∏—è 3.1 - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω—ã–º –º–µ—Ç–æ–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_CONFIG = {
    APP_NAME: 'CNCMonitoring',
    API_BASE_URL: 'http://localhost:3004/api',
    ENDPOINTS: {
        SETTINGS: '/settings',
        SAVE_SETTINGS: '/settings/save', // –ï–î–ò–ù–´–ô –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        IMPORT_SETTINGS: '/settings/import',
        BACKUPS: '/settings/backups',
        RESTORE: '/settings/restore',
        HEALTH: '/health',
        DISTRIBUTION: '/settings/distribution',
        WORKSHOPS: '/settings/workshops',
        STATS: '/settings/stats',
        DEBUG: '/settings/debug',
        VERIFY: '/settings/verify'
    },
    SESSION_TIMEOUT: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
    MAX_LOGIN_ATTEMPTS: 5,
    LOCKOUT_TIME: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    DEFAULT_REQUEST_HEADERS: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
};

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
const StorageManager = {
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    getItem: function(key) {
        try {
            const item = localStorage.getItem(`${APP_CONFIG.APP_NAME}_${key}`);
            if (!item) return null;

            const data = JSON.parse(item);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            if (data.expires && Date.now() > data.expires) {
                this.removeItem(key);
                return null;
            }
            
            return data.value;
        } catch (e) {
            console.error('StorageManager.getItem error:', e);
            this.removeItem(key); // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return null;
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
    setItem: function(key, value, ttl = null) {
        try {
            const item = {
                value: value,
                timestamp: Date.now()
            };

            if (ttl) {
                item.expires = Date.now() + ttl;
            }

            localStorage.setItem(`${APP_CONFIG.APP_NAME}_${key}`, JSON.stringify(item));
            return true;
        } catch (e) {
            console.error('StorageManager.setItem error:', e);
            return false;
        }
    },

    // –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    removeItem: function(key) {
        try {
            localStorage.removeItem(`${APP_CONFIG.APP_NAME}_${key}`);
            return true;
        } catch (e) {
            console.error('StorageManager.removeItem error:', e);
            return false;
        }
    },

    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    clearAll: function() {
        try {
            Object.keys(localStorage).forEach(key => {
                if (key.startsWith(APP_CONFIG.APP_NAME)) {
                    localStorage.removeItem(key);
                }
            });
            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –∏–∑ localStorage');
            return true;
        } catch (e) {
            console.error('StorageManager.clearAll error:', e);
            return false;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    getAllKeys: function() {
        try {
            return Object.keys(localStorage).filter(key => 
                key.startsWith(APP_CONFIG.APP_NAME)
            );
        } catch (e) {
            console.error('StorageManager.getAllKeys error:', e);
            return [];
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
    hasItem: function(key) {
        return localStorage.getItem(`${APP_CONFIG.APP_NAME}_${key}`) !== null;
    }
};

// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SettingsApiClient = {
    // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    request: async function(endpoint, method = 'GET', data = null, options = {}) {
        const url = APP_CONFIG.API_BASE_URL + endpoint;
        const requestOptions = {
            method: method,
            headers: { ...APP_CONFIG.DEFAULT_REQUEST_HEADERS, ...options.headers },
            credentials: 'include',
            timeout: options.timeout || 30000
        };

        if (data && (method === 'POST' || method === 'PUT')) {
            requestOptions.body = JSON.stringify(data);
        }

        try {
            console.log(`üåê API Request: ${method} ${endpoint}`);
            
            const response = await fetch(url, requestOptions);
            
            if (!response.ok) {
                const errorText = await response.text();
                let errorData;
                try {
                    errorData = JSON.parse(errorText);
                } catch {
                    errorData = { message: errorText || `HTTP error! status: ${response.status}` };
                }
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            const responseData = await response.json();
            console.log(`‚úÖ API Response: ${endpoint}`, responseData.success);
            return responseData;

        } catch (error) {
            console.error(`‚ùå API Request failed: ${method} ${endpoint}`, error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    getSettings: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.SETTINGS);
    },

    // –ï–î–ò–ù–´–ô –ú–ï–¢–û–î: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    saveSettings: async function(settings) {
        return await this.request(APP_CONFIG.ENDPOINTS.SAVE_SETTINGS, 'POST', { settings });
    },

    // –£–î–ê–õ–ï–ù –ú–ï–¢–û–î saveWorkshops() - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω!

    // –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    importSettings: async function(settings) {
        return await this.request(APP_CONFIG.ENDPOINTS.IMPORT_SETTINGS, 'POST', { settings });
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    getBackups: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.BACKUPS);
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    restoreFromBackup: async function(filename) {
        return await this.request(APP_CONFIG.ENDPOINTS.RESTORE, 'POST', { filename });
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    checkHealth: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.HEALTH);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    getDistribution: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.DISTRIBUTION);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ—Ö–æ–≤
    getWorkshops: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.WORKSHOPS);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    getStats: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.STATS);
    },

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    debugDatabase: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.DEBUG);
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    verifyData: async function() {
        return await this.request(APP_CONFIG.ENDPOINTS.VERIFY);
    }
};

// –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const SettingsManager = {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑ –∫—ç—à–∞
    loadSettings: async function() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await SettingsApiClient.getSettings();
            
            if (response.success && response.settings) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                StorageManager.setItem('settings', response.settings, APP_CONFIG.SESSION_TIMEOUT);
                StorageManager.setItem('lastUpdate', new Date().toISOString());
                
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', {
                    workshops: response.settings.workshops.length,
                    machines: response.settings.machines.length,
                    workshopsList: response.settings.workshops.map(w => w.name)
                });
                
                return response.settings;
            } else {
                throw new Error('Invalid server response');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            const cachedSettings = StorageManager.getItem('settings');
            if (cachedSettings) {
                console.log('üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
                return cachedSettings;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            return this.getDefaultSettings();
        }
    },

    // –ï–î–ò–ù–´–ô –ú–ï–¢–û–î: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    saveSettings: async function(settings) {
        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –í–°–ï–• –Ω–∞—Å—Ç—Ä–æ–µ–∫:', {
                workshops: settings.workshops.length,
                machines: settings.machines.length
            });
            
            const response = await SettingsApiClient.saveSettings(settings);
            
            if (response.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                StorageManager.setItem('settings', settings, APP_CONFIG.SESSION_TIMEOUT);
                StorageManager.setItem('lastUpdate', new Date().toISOString());
                
                console.log('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', {
                    workshops: settings.workshops.length,
                    machines: settings.machines.length
                });
                
                return true;
            } else {
                throw new Error(response.message || 'Save failed');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
            StorageManager.setItem('settings', settings, APP_CONFIG.SESSION_TIMEOUT);
            StorageManager.setItem('lastUpdate', new Date().toISOString());
            
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    getDefaultSettings: function() {
        return {
            workshops: [
                { 
                    id: 1, 
                    name: "–¶–ï–•-1", 
                    machinesCount: 0 
                }
            ],
            machines: []
        };
    },

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    getLastUpdate: function() {
        return StorageManager.getItem('lastUpdate');
    },

    // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
    clearCache: function() {
        StorageManager.removeItem('settings');
        StorageManager.removeItem('lastUpdate');
        console.log('üßπ –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–∏—â–µ–Ω');
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    verifyDataIntegrity: async function() {
        try {
            const response = await SettingsApiClient.verifyData();
            
            if (response.success) {
                console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', response.analysis);
                return response;
            } else {
                throw new Error('Data verification failed');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
const UIManager = {
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification: function(message, type = 'info', duration = 4000) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let notificationContainer = document.getElementById('notificationContainer');
        if (!notificationContainer) {
            notificationContainer = document.createElement('div');
            notificationContainer.id = 'notificationContainer';
            notificationContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
            `;
            document.body.appendChild(notificationContainer);
        }

        const notification = document.createElement('div');
        const types = {
            success: { bg: '#2ecc71', icon: 'fa-check' },
            error: { bg: '#e74c3c', icon: 'fa-exclamation-circle' },
            warning: { bg: '#f39c12', icon: 'fa-exclamation-triangle' },
            info: { bg: '#3498db', icon: 'fa-info-circle' }
        };

        const config = types[type] || types.info;

        notification.innerHTML = `
            <div style="
                background: ${config.bg};
                color: white;
                padding: 12px 16px;
                margin-bottom: 10px;
                border-radius: 4px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                display: flex;
                align-items: center;
                gap: 10px;
                animation: slideIn 0.3s ease-out;
            ">
                <i class="fas ${config.icon}" style="font-size: 16px;"></i>
                <span>${message}</span>
            </div>
        `;

        notificationContainer.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, duration);

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!document.getElementById('notificationStyles')) {
            const style = document.createElement('style');
            style.id = 'notificationStyles';
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError: function(message, duration = 5000) {
        this.showNotification(message, 'error', duration);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
    showSuccess: function(message, duration = 3000) {
        this.showNotification(message, 'success', duration);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    showInfo: function(message, duration = 4000) {
        this.showNotification(message, 'info', duration);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppInitializer = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    initialize: async function() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
            const healthResponse = await SettingsApiClient.checkHealth();
            const isServerHealthy = healthResponse.success && healthResponse.database === 'connected';

            if (!isServerHealthy) {
                console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
                UIManager.showInfo('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = await SettingsManager.loadSettings();
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', {
                server: isServerHealthy ? 'online' : 'offline',
                workshops: settings.workshops.length,
                machines: settings.machines.length
            });

            return {
                settings: settings,
                serverStatus: isServerHealthy ? 'online' : 'offline',
                lastUpdate: SettingsManager.getLastUpdate()
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            UIManager.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                settings: SettingsManager.getDefaultSettings(),
                serverStatus: 'error',
                lastUpdate: null
            };
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    checkDatabaseState: async function() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...');
            
            const debugResponse = await SettingsApiClient.debugDatabase();
            
            if (debugResponse.success) {
                const debugInfo = debugResponse.debug;
                const latest = debugInfo.latest_settings;
                
                console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:', debugInfo);
                
                return {
                    success: true,
                    workshops: latest.workshops_count,
                    machines: latest.machines_count,
                    distribution: debugInfo.distribution_count,
                    totalMachines: debugInfo.machines_count,
                    workshopsList: latest.workshops_list
                };
            } else {
                throw new Error(debugResponse.message || 'Debug request failed');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î:', error);
            UIManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î: ' + error.message);
            
            return {
                success: false,
                error: error.message
            };
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.CNCMonitoring = {
    // API
    api: SettingsApiClient,
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ
    storage: StorageManager,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settings: SettingsManager,
    
    // UI
    ui: UIManager,
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init: AppInitializer.initialize,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    checkDB: AppInitializer.checkDatabaseState,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    verifyData: SettingsManager.verifyDataIntegrity,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    utils: {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        formatFileSize: function(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        },
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        formatDate: function(dateString) {
            return new Date(dateString).toLocaleString('ru-RU');
        },
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        generateId: function() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        }
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const appState = await window.CNCMonitoring.init();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        window.dispatchEvent(new CustomEvent('appInitialized', {
            detail: appState
        }));
        
        console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        window.CNCMonitoring.ui.showError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        StorageManager,
        SettingsApiClient,
        SettingsManager,
        UIManager,
        AppInitializer,
        APP_CONFIG
    };
}