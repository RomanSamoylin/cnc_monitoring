// settings-manager.js - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –ë–î
class SettingsManager {
    constructor() {
        this.settings = {
            workshops: [],
            machines: []
        };
        this.isLoaded = false;
        this.SERVER_URL = 'http://localhost:3004';
        this.retryCount = 0;
        this.maxRetries = 3;
        this.autoRefreshInterval = null;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async loadSettings() {
        try {
            console.log('üîÑ –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –° –°–ï–†–í–ï–†–ê (–ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê)...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            if (!data.settings) {
                throw new Error('No settings data in response');
            }

            console.log('üì• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ –°–ï–†–í–ï–†–ê:', {
                workshops: data.settings.workshops.length,
                machines: data.settings.machines.length,
                workshopsList: data.settings.workshops.map(w => `${w.name}(id:${w.id})`),
                machinesDistribution: data.settings.machines.map(m => `${m.name} -> –¶–ï–•-${m.workshopId}`)
            });

            // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            this.settings = {
                workshops: data.settings.workshops ? [...data.settings.workshops] : [],
                machines: data.settings.machines ? [...data.settings.machines] : []
            };

            this.isLoaded = true;
            this.retryCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            
            console.log('‚úÖ –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–ì–†–£–ñ–ï–ù–´:', {
                workshops: this.settings.workshops.length,
                machines: this.settings.machines.length,
                workshopsList: this.settings.workshops.map(w => `${w.name}(id:${w.id}, count:${w.machinesCount})`)
            });
            
            this.dispatchSettingsLoaded();
            return true;
            
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ù–ê–°–¢–†–û–ï–ö –° –°–ï–†–í–ï–†–ê:', error);
            this.retryCount++;
            
            // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (this.retryCount >= this.maxRetries) {
                console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫');
                this.useDefaultSettings();
                return true;
            }
            
            return false;
        }
    }

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    useDefaultSettings() {
        this.settings = {
            workshops: [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }],
            machines: []
        };
        this.isLoaded = true;
        this.dispatchSettingsLoaded();
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    async refreshSettings() {
        try {
            console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/refresh`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }

            console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –° –°–ï–†–í–ï–†–ê:', {
                workshops: data.settings.workshops.length,
                machines: data.settings.machines.length,
                workshopsList: data.settings.workshops.map(w => `${w.name}(id:${w.id})`)
            });
            
            // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            this.settings = {
                workshops: data.settings.workshops ? [...data.settings.workshops] : [],
                machines: data.settings.machines ? [...data.settings.machines] : []
            };
            
            this.isLoaded = true;
            
            console.log('‚úÖ –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–ù–û–í–õ–ï–ù–´:', {
                workshops: this.settings.workshops.length,
                machines: this.settings.machines.length
            });
            
            this.dispatchSettingsUpdated();
            return true;
            
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:', error);
            this.dispatchSettingsError(error);
            return false;
        }
    }

    // –ï–î–ò–ù–´–ô –ú–ï–¢–û–î –°–û–•–†–ê–ù–ï–ù–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveSettings(settings) {
        try {
            console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ù–ê–°–¢–†–û–ï–ö –ù–ê –°–ï–†–í–ï–†:', {
                workshops: settings.workshops.length,
                machines: settings.machines.length,
                workshopsList: settings.workshops.map(w => `${w.name}(id:${w.id})`),
                machinesDistribution: settings.machines.map(m => `${m.name} -> –¶–ï–•-${m.workshopId}`)
            });
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ settings })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (data.settings) {
                console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–´–• –ù–ê–°–¢–†–û–ï–ö –î–ê–ù–ù–´–ú–ò –° –°–ï–†–í–ï–†–ê:', {
                    workshops: data.settings.workshops.length,
                    machines: data.settings.machines.length
                });
                
                this.settings.workshops = data.settings.workshops ? [...data.settings.workshops] : [];
                this.settings.machines = data.settings.machines ? [...data.settings.machines] : [];
            }
            
            console.log('üíæ –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–´ –ù–ê –°–ï–†–í–ï–†');
            
            this.dispatchSettingsUpdated();
            return true;
            
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö –ù–ê –°–ï–†–í–ï–†:', error);
            this.dispatchSettingsError(error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ—Ö–∞ –¥–ª—è —Å—Ç–∞–Ω–∫–∞
    getWorkshopForMachine(machineId) {
        const machine = this.settings.machines.find(m => m.id === machineId);
        return machine ? machine.workshopId : 1;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ—Ö–æ–≤
    getWorkshops() {
        console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ü–µ—Ö–æ–≤:', this.settings.workshops.length);
        return this.settings.workshops;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ—Ö–∞ –ø–æ ID
    getWorkshopById(workshopId) {
        const workshop = this.settings.workshops.find(w => w.id == workshopId);
        console.log('üîç –ü–æ–∏—Å–∫ —Ü–µ—Ö–∞ –ø–æ ID:', workshopId, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç:', workshop);
        return workshop;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ—Ö–∞ –ø–æ ID
    getWorkshopNameById(workshopId) {
        const workshop = this.getWorkshopById(workshopId);
        const name = workshop ? workshop.name : `–¶–ï–•-${workshopId}`;
        console.log('üè≠ –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ—Ö–∞ –ø–æ ID:', workshopId, '=', name);
        return name;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è —Ü–µ—Ö–∞
    getMachinesForWorkshop(workshopId) {
        const machines = this.settings.machines.filter(machine => {
            const machineWorkshop = machine.workshopId || this.getWorkshopForMachine(machine.id);
            return machineWorkshop == workshopId;
        });
        console.log('üîß –°—Ç–∞–Ω–∫–∏ –¥–ª—è —Ü–µ—Ö–∞', workshopId, ':', machines.length);
        return machines;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤
    getAllMachines() {
        console.log('üìä –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤:', this.settings.machines.length);
        return this.settings.machines;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –ø–æ ID
    getMachineById(machineId) {
        const machine = this.settings.machines.find(m => m.id == machineId);
        console.log('üîç –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω–∫–∞ –ø–æ ID:', machineId, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç:', machine);
        return machine;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–∫–∞ –ø–æ ID
    getMachineNameById(machineId) {
        const machine = this.getMachineById(machineId);
        const name = machine ? machine.name : `–°—Ç–∞–Ω–æ–∫-${machineId}`;
        console.log('‚öôÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –ø–æ ID:', machineId, '=', name);
        return name;
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–µ—Ö
    async moveMachineToWorkshop(machineId, workshopId) {
        try {
            console.log(`‚û°Ô∏è –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –°–¢–ê–ù–ö–ê ${machineId} –í –¶–ï–• ${workshopId}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const machine = this.getMachineById(machineId);
            if (machine) {
                const oldWorkshopId = machine.workshopId;
                machine.workshopId = workshopId;
                
                console.log(`üîÑ –°—Ç–∞–Ω–æ–∫ "${machine.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ —Ü–µ—Ö–∞ ${oldWorkshopId} –≤ —Ü–µ—Ö ${workshopId}`);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settingsToSave = {
                workshops: this.settings.workshops,
                machines: this.settings.machines
            };
            
            await this.saveSettings(settingsToSave);
            console.log(`‚úÖ –°—Ç–∞–Ω–æ–∫ ${machineId} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ü–µ—Ö ${workshopId}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    async getQuickDistribution() {
        try {
            console.log('üöÄ –ó–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...');
            const response = await fetch(`${this.SERVER_URL}/api/settings/quick-distribution`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:', data.distribution);
            return data.distribution;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            console.log('üìà –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            const response = await fetch(`${this.SERVER_URL}/api/settings/stats`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', data.stats);
            return data.stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    async debugSystem() {
        try {
            console.log('üîç –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/debug`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:', data.debug);
            return data.debug;
            
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´:', error);
            throw error;
        }
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    async detailedDebug() {
        try {
            console.log('üîç –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/debug-detailed`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:', data);
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            console.log('üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô:', {
                server: data.workshops.map(w => `${w.workshop_name}(id:${w.workshop_id})`),
                client: this.settings.workshops.map(w => `${w.name}(id:${w.id})`)
            });
            
            return data;
            
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    async checkHealth() {
        try {
            console.log('‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
            const response = await fetch(`${this.SERVER_URL}/api/health`);
            if (!response.ok) return false;
            
            const data = await response.json();
            const isHealthy = data.success && data.database === 'connected';
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞:', isHealthy);
            return isHealthy;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    async verifyDataIntegrity() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
            const response = await fetch(`${this.SERVER_URL}/api/settings/verify`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', data.analysis);
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ—Ö–æ–≤
    async forceReloadWorkshops() {
        try {
            console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –¶–ï–•–û–í...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/workshops`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            if (data.workshops) {
                this.settings.workshops = [...data.workshops];
                
                console.log('‚úÖ –¶–µ—Ö–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.workshops.length);
                this.dispatchSettingsUpdated();
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ—Ö–æ–≤:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    async getBackupsList() {
        try {
            console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...');
            const response = await fetch(`${this.SERVER_URL}/api/settings/backups`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', data.backups.length);
            return data.backups;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
            throw error;
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    async restoreFromBackup(filename) {
        try {
            console.log(`üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò: ${filename}`);
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/restore`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ filename })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (data.settings) {
                this.settings = {
                    workshops: data.settings.workshops ? [...data.settings.workshops] : [],
                    machines: data.settings.machines ? [...data.settings.machines] : []
                };
                this.isLoaded = true;
                this.dispatchSettingsUpdated();
            }
            
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            throw error;
        }
    }

    // –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async importSettings(settingsData) {
        try {
            console.log('üì• –ò–ú–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/import`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ settings: settingsData })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (data.settings) {
                this.settings = {
                    workshops: data.settings.workshops ? [...data.settings.workshops] : [],
                    machines: data.settings.machines ? [...data.settings.machines] : []
                };
                this.isLoaded = true;
                this.dispatchSettingsUpdated();
            }
            
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            throw error;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    dispatchSettingsLoaded() {
        console.log('üì¢ –î–∏—Å–ø–∞—Ç—á —Å–æ–±—ã—Ç–∏—è: settingsLoaded');
        window.dispatchEvent(new CustomEvent('settingsLoaded', {
            detail: this.settings
        }));
    }

    dispatchSettingsUpdated() {
        console.log('üì¢ –î–∏—Å–ø–∞—Ç—á —Å–æ–±—ã—Ç–∏—è: settingsUpdated');
        window.dispatchEvent(new CustomEvent('settingsUpdated', {
            detail: this.settings
        }));
    }

    dispatchSettingsError(error) {
        console.log('üì¢ –î–∏—Å–ø–∞—Ç—á —Å–æ–±—ã—Ç–∏—è: settingsError', error);
        window.dispatchEvent(new CustomEvent('settingsError', {
            detail: {
                message: error.message,
                timestamp: new Date().toISOString()
            }
        }));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    isSettingsLoaded() {
        const loaded = this.isLoaded;
        console.log('‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', loaded);
        return loaded;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    startAutoRefresh(interval = 30000) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
        }
        
        console.log(`üîÑ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –° –ò–ù–¢–ï–†–í–ê–õ–û–ú ${interval}ms`);
        
        this.autoRefreshInterval = setInterval(async () => {
            try {
                const isHealthy = await this.checkHealth();
                if (isHealthy) {
                    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
                    await this.refreshSettings();
                } else {
                    console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, interval);
        
        console.log(`üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û`);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopAutoRefresh() {
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
            this.autoRefreshInterval = null;
            console.log('‚èπÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    getCurrentState() {
        return {
            workshops: [...this.settings.workshops],
            machines: [...this.settings.machines],
            isLoaded: this.isLoaded,
            lastUpdate: new Date().toISOString()
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    createBackup() {
        const backupData = {
            timestamp: new Date().toISOString(),
            version: '2.0',
            databaseStructure: 'workshop_settings',
            settings: this.settings
        };
        
        const blob = new Blob([JSON.stringify(backupData, null, 2)], { 
            type: 'application/json' 
        });
        
        return blob;
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    destroy() {
        this.stopAutoRefresh();
        console.log('üßπ SettingsManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
window.SettingsManager = new Proxy(new SettingsManager(), {
    get(target, prop) {
        if (typeof target[prop] === 'function') {
            return function(...args) {
                try {
                    console.log(`üîß –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ SettingsManager.${prop}`, args);
                    const result = target[prop].apply(target, args);
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Promise –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    if (result instanceof Promise) {
                        return result.catch(error => {
                            console.error(`‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ SettingsManager.${prop}:`, error);
                            target.dispatchSettingsError(error);
                            throw error;
                        });
                    }
                    
                    return result;
                } catch (error) {
                    console.error(`‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ SettingsManager.${prop}:`, error);
                    target.dispatchSettingsError(error);
                    throw error;
                }
            };
        }
        return target[prop];
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SETTINGSMANAGER (–ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ë–î)...');
        console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: workshop_settings + machine_workshop_assignment');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const isHealthy = await window.SettingsManager.checkHealth();
        if (!isHealthy) {
            console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
        }
        
        await window.SettingsManager.loadSettings();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        if (!window.location.pathname.includes('settings.html')) {
            window.SettingsManager.startAutoRefresh();
        }
        
        console.log('‚úÖ SETTINGSMANAGER –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù');
        
    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò SETTINGSMANAGER:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        window.SettingsManager.stopAutoRefresh();
        console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    } else {
        console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.SettingsManager.refreshSettings().then(() => {
            window.SettingsManager.startAutoRefresh();
        });
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ settings.html
window.checkDatabaseState = async function() {
    try {
        const debugInfo = await window.SettingsManager.debugSystem();
        
        if (debugInfo) {
            const message = `–°–∏—Å—Ç–µ–º–∞: ${debugInfo.workshops_count} —Ü–µ—Ö–æ–≤, ${debugInfo.assignment_count} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, ${debugInfo.machines_count} —Å—Ç–∞–Ω–∫–æ–≤`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            alert(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:\n\n` +
                  `–¶–µ—Ö–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${debugInfo.workshops_count}\n` +
                  `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: ${debugInfo.assignment_count}\n` +
                  `–í—Å–µ–≥–æ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${debugInfo.machines_count}\n\n` +
                  `–¢–µ–∫—É—â–∏–µ —Ü–µ—Ö–∏: ${debugInfo.workshops.map(w => `${w.workshop_name}(id:${w.workshop_id})`).join(', ')}`);
            
            return message;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:', error);
        throw error;
    }
};

window.detailedDebug = async function() {
    try {
        const debugInfo = await window.SettingsManager.detailedDebug();
        
        if (debugInfo) {
            let message = `üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:\n\n`;
            message += `–¶–µ—Ö–æ–≤: ${debugInfo.summary.total_workshops}\n`;
            message += `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: ${debugInfo.summary.total_assignment}\n`;
            message += `–°—Ç–∞–Ω–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${debugInfo.summary.total_machines}\n\n`;
            
            message += `–°–ø–∏—Å–æ–∫ —Ü–µ—Ö–æ–≤:\n`;
            debugInfo.workshops.forEach(workshop => {
                message += `- ${workshop.workshop_name} (ID: ${workshop.workshop_id}, —Å—Ç–∞–Ω–∫–æ–≤: ${workshop.machines_count})\n`;
            });
            
            alert(message);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
    }
};

window.getSettingsManager = function() {
    return window.SettingsManager;
};

window.verifyDataIntegrity = async function() {
    try {
        const result = await window.SettingsManager.verifyDataIntegrity();
        if (result) {
            const analysis = result.analysis;
            let message = `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n`;
            message += `–¶–µ—Ö–æ–≤: ${analysis.total_workshops}\n`;
            message += `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: ${analysis.total_assignment}\n`;
            message += `–°—Ç–∞–Ω–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${analysis.total_machines}\n\n`;
            
            if (analysis.data_consistency.missing_assignment.length > 0) {
                message += `‚ö†Ô∏è –°—Ç–∞–Ω–∫–∏ –±–µ–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${analysis.data_consistency.missing_assignment.join(', ')}\n`;
            }
            
            if (analysis.data_consistency.assignment_without_machine.length > 0) {
                message += `‚ö†Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ —Å—Ç–∞–Ω–∫–æ–≤: ${analysis.data_consistency.assignment_without_machine.join(', ')}\n`;
            }
            
            if (analysis.data_consistency.missing_assignment.length === 0 && 
                analysis.data_consistency.assignment_without_machine.length === 0) {
                message += `‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –û–¢–õ–ò–ß–ù–û\n`;
            }
            
            alert(message);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
};

window.forceReloadWorkshops = async function() {
    try {
        await window.SettingsManager.forceReloadWorkshops();
        alert('–¶–µ—Ö–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ—Ö–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ—Ö–æ–≤: ' + error.message);
    }
};

window.refreshData = async function() {
    try {
        await window.SettingsManager.refreshSettings();
        alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
};

window.getBackupsList = async function() {
    try {
        const backups = await window.SettingsManager.getBackupsList();
        return backups;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
        throw error;
    }
};

window.restoreFromBackup = async function(filename) {
    try {
        await window.SettingsManager.restoreFromBackup(filename);
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
    }
};