// settings-manager.js - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
class SettingsManager {
    constructor() {
        this.settings = {
            workshops: [],
            machines: [],
            distribution: {}
        };
        this.isLoaded = false;
        this.autoRefreshInterval = null;
        this.SERVER_URL = 'http://localhost:3004';
        this.retryCount = 0;
        this.maxRetries = 3;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async loadSettings() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            if (!data.settings) {
                throw new Error('No settings data in response');
            }

            this.settings = data.settings;
            this.isLoaded = true;
            this.updateDistributionFromMachines();
            this.saveToLocalStorage();
            
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                workshops: this.settings.workshops.length,
                machines: this.settings.machines.length,
                workshopsList: this.settings.workshops.map(w => w.name)
            });
            
            this.dispatchSettingsLoaded();
            this.retryCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            this.retryCount++;
            
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
            if (this.loadFromLocalStorage()) {
                console.log('üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
                return true;
            }
            
            // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (this.retryCount >= this.maxRetries) {
                console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫');
                this.useDefaultSettings();
                return true;
            }
            
            return false;
        }
    }

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    useDefaultSettings() {
        this.settings = {
            workshops: [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }],
            machines: [],
            distribution: {}
        };
        this.isLoaded = true;
        this.dispatchSettingsLoaded();
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    async refreshSettings() {
        try {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/refresh`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            this.settings = data.settings;
            this.isLoaded = true;
            this.updateDistributionFromMachines();
            this.saveToLocalStorage();
            
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
                workshops: this.settings.workshops.length,
                machines: this.settings.machines.length
            });
            
            this.dispatchSettingsUpdated();
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            this.dispatchSettingsError(error);
            return false;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveSettings(settings) {
        try {
            const response = await fetch(`${this.SERVER_URL}/api/settings/save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ settings })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (data.settings) {
                this.settings.workshops = data.settings.workshops;
                this.settings.machines = data.settings.machines;
                this.updateDistributionFromMachines();
            }
            
            this.saveToLocalStorage();
            console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            
            this.dispatchSettingsUpdated();
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            this.dispatchSettingsError(error);
            throw error;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ü–µ—Ö–æ–≤
    async saveWorkshops(workshops) {
        try {
            const response = await fetch(`${this.SERVER_URL}/api/settings/save-workshops`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ workshops })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('üíæ –¶–µ—Ö–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', workshops.length, '—Ü–µ—Ö–æ–≤');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ—Ö–æ–≤:', error);
            throw error;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveToLocalStorage() {
        try {
            const dataToSave = {
                settings: this.settings,
                timestamp: new Date().toISOString(),
                version: '2.1'
            };
            localStorage.setItem('cnc_settings_v2', JSON.stringify(dataToSave));
            console.log('üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    loadFromLocalStorage() {
        try {
            const saved = localStorage.getItem('cnc_settings_v2');
            if (saved) {
                const parsed = JSON.parse(saved);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                const savedTime = new Date(parsed.timestamp);
                const currentTime = new Date();
                const hoursDiff = (currentTime - savedTime) / (1000 * 60 * 60);
                
                if (hoursDiff < 24) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏–º –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤
                    this.settings = parsed.settings;
                    this.isLoaded = true;
                    this.updateDistributionFromMachines();
                    
                    console.log('üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', {
                        workshops: this.settings.workshops.length,
                        machines: this.settings.machines.length
                    });
                    
                    this.dispatchSettingsLoaded();
                    return true;
                } else {
                    console.log('üïí –î–∞–Ω–Ω—ã–µ –≤ localStorage —É—Å—Ç–∞—Ä–µ–ª–∏');
                    localStorage.removeItem('cnc_settings_v2');
                }
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
            localStorage.removeItem('cnc_settings_v2');
        }
        return false;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
    updateDistributionFromMachines() {
        this.settings.distribution = {};
        this.settings.machines.forEach(machine => {
            this.settings.distribution[machine.id] = machine.workshopId;
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ—Ö–∞ –¥–ª—è —Å—Ç–∞–Ω–∫–∞
    getWorkshopForMachine(machineId) {
        return this.settings.distribution[machineId] || 1;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ—Ö–æ–≤
    getWorkshops() {
        return this.settings.workshops;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ—Ö–∞ –ø–æ ID
    getWorkshopById(workshopId) {
        return this.settings.workshops.find(w => w.id == workshopId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ—Ö–∞ –ø–æ ID
    getWorkshopNameById(workshopId) {
        const workshop = this.getWorkshopById(workshopId);
        return workshop ? workshop.name : `–¶–ï–•-${workshopId}`;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è —Ü–µ—Ö–∞
    getMachinesForWorkshop(workshopId) {
        return this.settings.machines.filter(machine => {
            const machineWorkshop = machine.workshopId || this.getWorkshopForMachine(machine.id);
            return machineWorkshop == workshopId;
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤
    getAllMachines() {
        return this.settings.machines;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –ø–æ ID
    getMachineById(machineId) {
        return this.settings.machines.find(m => m.id == machineId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–∫–∞ –ø–æ ID
    getMachineNameById(machineId) {
        const machine = this.getMachineById(machineId);
        return machine ? machine.name : `–°—Ç–∞–Ω–æ–∫-${machineId}`;
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–µ—Ö
    async moveMachineToWorkshop(machineId, workshopId) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const machine = this.getMachineById(machineId);
            if (machine) {
                machine.workshopId = workshopId;
                this.settings.distribution[machineId] = workshopId;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const settingsToSave = {
                workshops: this.settings.workshops,
                machines: this.settings.machines
            };
            
            await this.saveSettings(settingsToSave);
            console.log(`‚û°Ô∏è –°—Ç–∞–Ω–æ–∫ ${machineId} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ü–µ—Ö ${workshopId}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    async getQuickDistribution() {
        try {
            const response = await fetch(`${this.SERVER_URL}/api/settings/quick-distribution`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            return data.distribution;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            const response = await fetch(`${this.SERVER_URL}/api/settings/stats`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            return data.stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î
    async debugDatabase() {
        try {
            console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î...');
            
            const response = await fetch(`${this.SERVER_URL}/api/settings/debug`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error('Server response indicates failure');
            }
            
            console.log('üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î:', data.debug);
            return data.debug;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î:', error);
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    async checkHealth() {
        try {
            const response = await fetch(`${this.SERVER_URL}/api/health`);
            if (!response.ok) return false;
            
            const data = await response.json();
            return data.success && data.database === 'connected';
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error);
            return false;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    dispatchSettingsLoaded() {
        window.dispatchEvent(new CustomEvent('settingsLoaded', {
            detail: this.settings
        }));
    }

    dispatchSettingsUpdated() {
        window.dispatchEvent(new CustomEvent('settingsUpdated', {
            detail: this.settings
        }));
    }

    dispatchSettingsError(error) {
        window.dispatchEvent(new CustomEvent('settingsError', {
            detail: {
                message: error.message,
                timestamp: new Date().toISOString()
            }
        }));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    isSettingsLoaded() {
        return this.isLoaded;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    getLastUpdateTime() {
        try {
            const saved = localStorage.getItem('cnc_settings_v2');
            if (saved) {
                const parsed = JSON.parse(saved);
                return new Date(parsed.timestamp);
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', e);
        }
        return null;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    startAutoRefresh(interval = 30000) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
        }
        
        this.autoRefreshInterval = setInterval(async () => {
            try {
                const isHealthy = await this.checkHealth();
                if (isHealthy) {
                    await this.refreshSettings();
                } else {
                    console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, interval);
        
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval}ms`);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopAutoRefresh() {
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
            this.autoRefreshInterval = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ localStorage
    clearLocalStorage() {
        try {
            localStorage.removeItem('cnc_settings_v2');
            console.log('üßπ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', e);
        }
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    destroy() {
        this.stopAutoRefresh();
        this.clearLocalStorage();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
window.SettingsManager = new Proxy(new SettingsManager(), {
    get(target, prop) {
        if (typeof target[prop] === 'function') {
            return function(...args) {
                try {
                    const result = target[prop].apply(target, args);
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Promise –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    if (result instanceof Promise) {
                        return result.catch(error => {
                            console.error(`‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ SettingsManager.${prop}:`, error);
                            target.dispatchSettingsError(error);
                            throw error;
                        });
                    }
                    
                    return result;
                } catch (error) {
                    console.error(`‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ SettingsManager.${prop}:`, error);
                    target.dispatchSettingsError(error);
                    throw error;
                }
            };
        }
        return target[prop];
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SettingsManager...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const isHealthy = await window.SettingsManager.checkHealth();
        if (!isHealthy) {
            console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage');
        }
        
        await window.SettingsManager.loadSettings();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        if (!window.location.pathname.includes('settings.html')) {
            window.SettingsManager.startAutoRefresh();
        }
        
        console.log('‚úÖ SettingsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SettingsManager:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        window.SettingsManager.stopAutoRefresh();
        console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    } else {
        console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.SettingsManager.refreshSettings().then(() => {
            window.SettingsManager.startAutoRefresh();
        });
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ settings.html
window.checkDatabaseState = async function() {
    try {
        const debugInfo = await window.SettingsManager.debugDatabase();
        
        if (debugInfo) {
            const latest = debugInfo.latest_settings;
            const message = `–ë–î: ${latest.workshops_count} —Ü–µ—Ö–æ–≤, ${latest.machines_count} —Å—Ç–∞–Ω–∫–æ–≤`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            alert(`üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î:\n\n` +
                  `–¶–µ—Ö–æ–≤ –≤ –ë–î: ${latest.workshops_count}\n` +
                  `–°—Ç–∞–Ω–∫–æ–≤ –≤ –ë–î: ${latest.machines_count}\n` +
                  `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${debugInfo.distribution_count} –∑–∞–ø–∏—Å–µ–π\n` +
                  `–í—Å–µ–≥–æ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${debugInfo.machines_count}\n\n` +
                  `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ—Ö–∏: ${latest.workshops_list.map(w => w.name).join(', ')}`);
            
            return message;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î:', error);
        throw error;
    }
};

window.getSettingsManager = function() {
    return window.SettingsManager;
};