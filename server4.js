// server4.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï–ú –î–ê–ù–ù–´–•
const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = 3004;

app.use(cors());
app.use(express.json());
app.use(express.static('.'));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  host: '192.168.1.30',
  user: 'monitor',
  password: 'victoria123',
  database: 'cnc_monitoring',
  timezone: '+03:00',
  connectionLimit: 15,
  connectTimeout: 30000,
  acquireTimeout: 30000,
  waitForConnections: true,
  queueLimit: 0
};

const pool = mysql.createPool(dbConfig);

async function getConnection() {
  return await pool.getConnection();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function initializeSettingsTables() {
  let connection;
  try {
    connection = await getConnection();
    
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS settings (
        id INT AUTO_INCREMENT PRIMARY KEY,
        data JSON NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS machine_workshop_distribution (
        machine_id INT PRIMARY KEY,
        workshop_id INT NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const [settingsRows] = await connection.execute('SELECT COUNT(*) as count FROM settings');
    if (settingsRows[0].count === 0) {
      const initialSettings = {
        workshops: [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }],
        machines: []
      };
      await connection.execute(
        'INSERT INTO settings (data, created_at) VALUES (?, NOW())',
        [JSON.stringify(initialSettings)]
      );
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
  } finally {
    if (connection) connection.release();
  }
}

// –ì–õ–ê–í–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
app.get('/api/settings', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        console.log('üîÑ –ó–ê–ü–†–û–° –ù–ê–°–¢–†–û–ï–ö –û–¢ –ö–õ–ò–ï–ù–¢–ê');
        
        // –ü–æ–ª—É—á–∞–µ–º –ü–û–°–õ–ï–î–ù–ò–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const [settingsRows] = await connection.execute(
            'SELECT data FROM settings ORDER BY id DESC LIMIT 1'
        );
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        const [machinesRows] = await connection.execute(
            'SELECT machine_id, cnc_name FROM cnc_id_mapping ORDER BY machine_id'
        );

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const [distributionRows] = await connection.execute(
            'SELECT machine_id, workshop_id FROM machine_workshop_distribution'
        );

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const distributionMap = {};
        distributionRows.forEach(row => {
            distributionMap[row.machine_id] = row.workshop_id;
        });

        console.log('üìä –î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:', {
            settingsRecords: settingsRows.length,
            machinesInSystem: machinesRows.length,
            distributionRecords: distributionRows.length,
            distributionMap: distributionMap
        });

        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let settings = {
            workshops: [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }],
            machines: []
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (settingsRows.length > 0) {
            try {
                const savedSettings = JSON.parse(settingsRows[0].data);
                
                console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:', {
                    workshops: savedSettings.workshops ? savedSettings.workshops.length : 0,
                    machines: savedSettings.machines ? savedSettings.machines.length : 0,
                    workshopsList: savedSettings.workshops ? savedSettings.workshops.map(w => `${w.name}(id:${w.id})`) : []
                });
                
                // –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –¶–ï–•–ò –ò–ó –°–û–•–†–ê–ù–ï–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö
                if (savedSettings.workshops && Array.isArray(savedSettings.workshops)) {
                    settings.workshops = savedSettings.workshops.map(workshop => ({
                        id: workshop.id,
                        name: workshop.name,
                        machinesCount: 0 // –°–±—Ä–æ—Å–∏–º —Å—á–µ—Ç—á–∏–∫–∏, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
                    }));
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–µ—Ö–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settings.workshops.length);
                }
                
                // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–æ–≤
                // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                const allMachinesFromSystem = machinesRows.map(row => ({
                    id: row.machine_id,
                    name: row.cnc_name,
                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¶–µ—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1)
                    workshopId: distributionMap[row.machine_id] !== undefined ? 
                                distributionMap[row.machine_id] : 
                                (savedSettings.machines ? 
                                    (savedSettings.machines.find(m => m.id === row.machine_id)?.workshopId || 1) : 
                                    1)
                }));
                
                settings.machines = allMachinesFromSystem;
                console.log('‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–æ–≤:', settings.machines.length);
                
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                settings.machines = machinesRows.map(row => ({
                    id: row.machine_id,
                    name: row.cnc_name,
                    workshopId: distributionMap[row.machine_id] || 1
                }));
            }
        } else {
            // –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            settings.machines = machinesRows.map(row => ({
                id: row.machine_id,
                name: row.cnc_name,
                workshopId: distributionMap[row.machine_id] || 1
            }));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Ü–µ—Ö–∞—Ö
        updateWorkshopsMachinesCount(settings);

        console.log('‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:', {
            workshops: settings.workshops.length,
            machines: settings.machines.length,
            workshopsList: settings.workshops.map(w => `${w.name}(id:${w.id}, –º–∞—à–∏–Ω:${w.machinesCount})`),
            distribution: settings.machines.map(m => `${m.name} -> –¶–ï–•-${m.workshopId}`)
        });

        res.json({
            success: true,
            settings: settings
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message
        });
    } finally {
        if (connection) connection.release();
    }
});

// –≠–ù–î–ü–û–ò–ù–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
app.post('/api/settings/save', async (req, res) => {
    let connection;
    try {
        const { settings } = req.body;
        
        if (!settings || !Array.isArray(settings.workshops) || !Array.isArray(settings.machines)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            });
        }

        console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö:', {
            workshops: settings.workshops.length,
            machines: settings.machines.length,
            workshopsList: settings.workshops.map(w => `${w.name}(id:${w.id})`)
        });

        connection = await getConnection();
        await connection.beginTransaction();

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            updateWorkshopsMachinesCount(settings);

            // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É settings
            await connection.execute(
                'INSERT INTO settings (data, created_at) VALUES (?, NOW())',
                [JSON.stringify(settings)]
            );

            // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤ (UPSERT)
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–æ–≤...');
            
            for (const machine of settings.machines) {
                await connection.execute(
                    `INSERT INTO machine_workshop_distribution (machine_id, workshop_id, updated_at) 
                     VALUES (?, ?, NOW()) 
                     ON DUPLICATE KEY UPDATE 
                     workshop_id = VALUES(workshop_id), 
                     updated_at = VALUES(updated_at)`,
                    [machine.id, machine.workshopId]
                );
            }

            await connection.commit();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            await saveBackup(settings);

            console.log('‚úÖ –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–´:', {
                workshops: settings.workshops.length,
                machines: settings.machines.length,
                distributionUpdated: settings.machines.length
            });

            res.json({
                success: true,
                message: '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                settings: settings
            });

        } catch (error) {
            await connection.rollback();
            throw error;
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message
        });
    } finally {
        if (connection) connection.release();
    }
});

// –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
app.get('/api/settings/distribution', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤
        const [distributionRows] = await connection.execute(
            'SELECT mwd.machine_id, mwd.workshop_id, cim.cnc_name ' +
            'FROM machine_workshop_distribution mwd ' +
            'JOIN cnc_id_mapping cim ON mwd.machine_id = cim.machine_id ' +
            'ORDER BY mwd.machine_id'
        );

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ—Ö–æ–≤
        const [settingsRows] = await connection.execute(
            'SELECT data FROM settings ORDER BY created_at DESC LIMIT 1'
        );

        let workshops = [{ id: 1, name: "–¶–ï–•-1" }];
        if (settingsRows.length > 0) {
            try {
                const savedSettings = JSON.parse(settingsRows[0].data);
                if (savedSettings.workshops) {
                    workshops = savedSettings.workshops;
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–µ—Ö–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', workshops.length);
                }
            } catch (e) {
                console.error('‚ùå Error parsing saved settings:', e);
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const distribution = {};
        const machines = distributionRows.map(row => {
            distribution[row.machine_id] = row.workshop_id;
            return {
                id: row.machine_id,
                name: row.cnc_name,
                workshop: row.workshop_id
            };
        });

        res.json({
            success: true,
            workshops: workshops,
            machines: machines,
            distribution: distribution
        });

    } catch (error) {
        console.error('‚ùå Error getting distribution:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'
        });
    } finally {
        if (connection) connection.release();
    }
});

// –≠–ù–î–ü–û–ò–ù–¢ –ò–ú–ü–û–†–¢–ê: –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
app.post('/api/settings/import', async (req, res) => {
    let connection;
    try {
        const { settings } = req.body;
        
        if (!settings) {
            return res.status(400).json({
                success: false,
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!Array.isArray(settings.workshops) || !Array.isArray(settings.machines)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            });
        }

        connection = await getConnection();
        await connection.beginTransaction();

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–∫–æ–≤ –∏–∑ –ë–î
            const [machinesRows] = await connection.execute(
                'SELECT machine_id, cnc_name FROM cnc_id_mapping'
            );
            const availableMachineIds = machinesRows.map(row => row.machine_id);

            // 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Å—Ç–∞–Ω–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î
            const validMachines = settings.machines.filter(machine => 
                availableMachineIds.includes(machine.id)
            );

            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await connection.execute(
                'INSERT INTO settings (data, created_at) VALUES (?, NOW())',
                [JSON.stringify({
                    workshops: settings.workshops,
                    machines: validMachines
                })]
            );

            // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤ (UPSERT)
            for (const machine of validMachines) {
                await connection.execute(
                    `INSERT INTO machine_workshop_distribution (machine_id, workshop_id, updated_at) 
                     VALUES (?, ?, NOW()) 
                     ON DUPLICATE KEY UPDATE 
                     workshop_id = VALUES(workshop_id), 
                     updated_at = VALUES(updated_at)`,
                    [machine.id, machine.workshopId]
                );
            }

            await connection.commit();

            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            const actualSettings = {
                workshops: settings.workshops,
                machines: validMachines
            };
            updateWorkshopsMachinesCount(actualSettings);

            await saveBackup(actualSettings);

            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:', {
                workshops: actualSettings.workshops.length,
                machines: actualSettings.machines.length
            });

            res.json({
                success: true,
                message: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${validMachines.length} —Å—Ç–∞–Ω–∫–æ–≤.`,
                settings: actualSettings
            });

        } catch (error) {
            await connection.rollback();
            throw error;
        }

    } catch (error) {
        console.error('‚ùå Error importing settings:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        });
    } finally {
        if (connection) connection.release();
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
app.get('/api/settings/backups', async (req, res) => {
    try {
        const backupDir = path.join(__dirname, 'backups');
        if (!fs.existsSync(backupDir)) {
            return res.json({
                success: true,
                backups: []
            });
        }

        const files = fs.readdirSync(backupDir)
            .filter(file => file.endsWith('.json'))
            .map(file => {
                const filePath = path.join(backupDir, file);
                const stats = fs.statSync(filePath);
                return {
                    name: file,
                    date: stats.mtime,
                    size: stats.size
                };
            })
            .sort((a, b) => b.date - a.date)
            .slice(0, 10);

        res.json({
            success: true,
            backups: files
        });

    } catch (error) {
        console.error('‚ùå Error getting backups list:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π'
        });
    }
});

// API –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
app.post('/api/settings/restore', async (req, res) => {
    let connection;
    try {
        const { filename } = req.body;
        
        if (!filename) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
            });
        }

        const backupFile = path.join(__dirname, 'backups', filename);
        if (!fs.existsSync(backupFile)) {
            return res.status(404).json({
                success: false,
                message: '–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        const backupData = JSON.parse(fs.readFileSync(backupFile, 'utf8'));

        connection = await getConnection();
        
        await connection.beginTransaction();

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            await connection.execute(
                'INSERT INTO settings (data, created_at) VALUES (?, NOW())',
                [JSON.stringify(backupData.settings)]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ—Ö–∞–º (UPSERT)
            for (const machine of backupData.settings.machines) {
                if (machine.id && machine.workshopId) {
                    await connection.execute(
                        `INSERT INTO machine_workshop_distribution (machine_id, workshop_id, updated_at) 
                         VALUES (?, ?, NOW()) 
                         ON DUPLICATE KEY UPDATE 
                         workshop_id = VALUES(workshop_id), 
                         updated_at = VALUES(updated_at)`,
                        [machine.id, machine.workshopId]
                    );
                }
            }

            await connection.commit();

            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', {
                workshops: backupData.settings.workshops.length,
                machines: backupData.settings.machines.length
            });

            res.json({
                success: true,
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏',
                settings: backupData.settings
            });

        } catch (error) {
            await connection.rollback();
            throw error;
        }

    } catch (error) {
        console.error('‚ùå Error restoring from backup:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
        });
    } finally {
        if (connection) connection.release();
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        await connection.execute('SELECT 1');
        
        res.json({
            success: true,
            status: 'OK',
            timestamp: new Date().toISOString(),
            database: 'connected'
        });

    } catch (error) {
        console.error('‚ùå Health check failed:', error);
        res.status(500).json({
            success: false,
            status: 'ERROR',
            timestamp: new Date().toISOString(),
            database: 'disconnected',
            error: error.message
        });
    } finally {
        if (connection) connection.release();
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
app.get('/api/settings/current', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        const [settingsRows] = await connection.execute(
            'SELECT data FROM settings ORDER BY created_at DESC LIMIT 1'
        );
        
        const [mappingRows] = await connection.execute(
            'SELECT machine_id, cnc_name FROM cnc_id_mapping ORDER BY machine_id'
        );

        let settings = {
            workshops: [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }],
            machines: []
        };

        if (settingsRows.length > 0) {
            try {
                const savedSettings = JSON.parse(settingsRows[0].data);
                if (savedSettings.workshops) settings.workshops = savedSettings.workshops;
                if (savedSettings.machines) settings.machines = savedSettings.machines;
            } catch (e) {
                console.error('‚ùå Error parsing saved settings:', e);
            }
        }

        const [distributionRows] = await connection.execute(
            'SELECT machine_id, workshop_id FROM machine_workshop_distribution'
        );

        const currentDistribution = {};
        distributionRows.forEach(row => {
            currentDistribution[row.machine_id] = row.workshop_id;
        });

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        const machinesFromDB = mappingRows.map(row => ({
            id: row.machine_id,
            name: row.cnc_name,
            workshopId: currentDistribution[row.machine_id] || 1
        }));

        settings.machines = machinesFromDB;
        updateWorkshopsMachinesCount(settings);

        const exportData = {
            exportDate: new Date().toISOString(),
            version: '2.0',
            settings: settings
        };

        res.json({
            success: true,
            data: exportData
        });

    } catch (error) {
        console.error('‚ùå Error getting current settings:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        });
    } finally {
        if (connection) connection.release();
    }
});

// –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
app.get('/api/settings/quick-distribution', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        const [distributionRows] = await connection.execute(
            'SELECT machine_id, workshop_id FROM machine_workshop_distribution ORDER BY machine_id'
        );

        const distribution = {};
        distributionRows.forEach(row => {
            distribution[row.machine_id] = row.workshop_id;
        });

        res.json({
            success: true,
            distribution: distribution,
            totalMachines: distributionRows.length,
            lastUpdate: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Error getting quick distribution:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'
        });
    } finally {
        if (connection) connection.release();
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ—Ö–æ–≤
app.get('/api/settings/workshops', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        const [settingsRows] = await connection.execute(
            'SELECT data FROM settings ORDER BY created_at DESC LIMIT 1'
        );

        let workshops = [{ id: 1, name: "–¶–ï–•-1" }];
        if (settingsRows.length > 0) {
            try {
                const savedSettings = JSON.parse(settingsRows[0].data);
                if (savedSettings.workshops) {
                    workshops = savedSettings.workshops;
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–µ—Ö–æ–≤ –∏–∑ –ë–î:', workshops.length);
                }
            } catch (e) {
                console.error('‚ùå Error parsing saved settings:', e);
            }
        }

        res.json({
            success: true,
            workshops: workshops
        });

    } catch (error) {
        console.error('‚ùå Error getting workshops:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ—Ö–æ–≤'
        });
    } finally {
        if (connection) connection.release();
    }
});

// API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.post('/api/settings/refresh', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        const [mappingRows] = await connection.execute(
            'SELECT machine_id, cnc_name FROM cnc_id_mapping ORDER BY machine_id'
        );

        const [distributionRows] = await connection.execute(
            'SELECT machine_id, workshop_id FROM machine_workshop_distribution'
        );

        const [settingsRows] = await connection.execute(
            'SELECT data FROM settings ORDER BY created_at DESC LIMIT 1'
        );

        let settings = {
            workshops: [{ id: 1, name: "–¶–ï–•-1", machinesCount: 0 }],
            machines: []
        };

        if (settingsRows.length > 0) {
            try {
                const savedSettings = JSON.parse(settingsRows[0].data);
                if (savedSettings.workshops) settings.workshops = savedSettings.workshops;
                if (savedSettings.machines) settings.machines = savedSettings.machines;
            } catch (e) {
                console.error('‚ùå Error parsing saved settings:', e);
            }
        }

        const currentDistribution = {};
        distributionRows.forEach(row => {
            currentDistribution[row.machine_id] = row.workshop_id;
        });

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        const machinesFromDB = mappingRows.map(row => ({
            id: row.machine_id,
            name: row.cnc_name,
            workshopId: currentDistribution[row.machine_id] || 1
        }));

        settings.machines = machinesFromDB;
        updateWorkshopsMachinesCount(settings);

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
            workshops: settings.workshops.length,
            machines: settings.machines.length
        });

        res.json({
            success: true,
            settings: settings,
            message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        });

    } catch (error) {
        console.error('‚ùå Error refreshing data:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        });
    } finally {
        if (connection) connection.release();
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/settings/stats', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        const [settingsRows] = await connection.execute(
            'SELECT data FROM settings ORDER BY created_at DESC LIMIT 1'
        );

        let workshopsCount = 1;
        let machinesCount = 0;
        
        if (settingsRows.length > 0) {
            try {
                const savedSettings = JSON.parse(settingsRows[0].data);
                if (savedSettings.workshops) workshopsCount = savedSettings.workshops.length;
                if (savedSettings.machines) machinesCount = savedSettings.machines.length;
            } catch (e) {
                console.error('‚ùå Error parsing saved settings:', e);
            }
        }

        const [distributionRows] = await connection.execute(
            'SELECT COUNT(*) as count FROM machine_workshop_distribution'
        );

        const [machinesRows] = await connection.execute(
            'SELECT COUNT(*) as count FROM cnc_id_mapping'
        );

        res.json({
            success: true,
            stats: {
                workshops: workshopsCount,
                machines: machinesCount,
                distribution: distributionRows[0].count,
                totalMachinesInDB: machinesRows[0].count,
                lastUpdate: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('‚ùå Error getting stats:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    } finally {
        if (connection) connection.release();
    }
});

// –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
app.get('/api/settings/debug', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ settings
        const [settingsRows] = await connection.execute(
            'SELECT id, data, created_at FROM settings ORDER BY id DESC LIMIT 5'
        );
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        const settingsAnalysis = settingsRows.map(row => {
            try {
                const data = JSON.parse(row.data);
                return {
                    id: row.id,
                    created_at: row.created_at,
                    workshops_count: data.workshops ? data.workshops.length : 0,
                    machines_count: data.machines ? data.machines.length : 0,
                    has_workshops: !!data.workshops,
                    workshops_list: data.workshops ? data.workshops.map(w => ({id: w.id, name: w.name})) : []
                };
            } catch (e) {
                return {
                    id: row.id,
                    created_at: row.created_at,
                    error: 'Parse error'
                };
            }
        });

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const [distributionRows] = await connection.execute(
            'SELECT COUNT(*) as count FROM machine_workshop_distribution'
        );

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–∫–∏
        const [machinesRows] = await connection.execute(
            'SELECT COUNT(*) as count FROM cnc_id_mapping'
        );

        res.json({
            success: true,
            debug: {
                settings_records: settingsAnalysis,
                distribution_count: distributionRows[0].count,
                machines_count: machinesRows[0].count,
                latest_settings: settingsAnalysis[0]
            }
        });

    } catch (error) {
        console.error('‚ùå Error in debug endpoint:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
        });
    } finally {
        if (connection) connection.release();
    }
});

// –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
app.get('/api/settings/debug-detailed', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–°–¢–†–û–ï–ö:');
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const [allSettings] = await connection.execute(
            'SELECT id, data, created_at FROM settings ORDER BY id DESC LIMIT 10'
        );
        
        console.log('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ settings:');
        allSettings.forEach((row, index) => {
            try {
                const data = JSON.parse(row.data);
                console.log(`–ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}, created: ${row.created_at}):`);
                console.log(`  - –¶–µ—Ö–æ–≤: ${data.workshops ? data.workshops.length : 'N/A'}`);
                console.log(`  - –°—Ç–∞–Ω–∫–æ–≤: ${data.machines ? data.machines.length : 'N/A'}`);
                if (data.workshops) {
                    console.log(`  - –°–ø–∏—Å–æ–∫ —Ü–µ—Ö–æ–≤: ${data.workshops.map(w => `${w.name}(id:${w.id})`).join(', ')}`);
                }
            } catch (e) {
                console.log(`  - –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}`);
            }
        });

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const [distributionRows] = await connection.execute(
            'SELECT * FROM machine_workshop_distribution ORDER BY machine_id'
        );
        console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤:', distributionRows);

        // 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–∫–∏
        const [machinesRows] = await connection.execute(
            'SELECT * FROM cnc_id_mapping ORDER BY machine_id'
        );
        console.log('üîß –°—Ç–∞–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:', machinesRows);

        res.json({
            success: true,
            all_settings: allSettings.map(row => {
                try {
                    return {
                        id: row.id,
                        created_at: row.created_at,
                        data: JSON.parse(row.data)
                    };
                } catch (e) {
                    return { id: row.id, error: e.message };
                }
            }),
            distribution: distributionRows,
            machines: machinesRows
        });

    } catch (error) {
        console.error('‚ùå Error in detailed debug:', error);
        res.status(500).json({ 
            success: false, 
            message: error.message 
        });
    } finally {
        if (connection) connection.release();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Ü–µ—Ö–∞—Ö
function updateWorkshopsMachinesCount(settings) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    settings.workshops.forEach(workshop => {
        workshop.machinesCount = 0;
    });

    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞–Ω–∫–∏ –ø–æ —Ü–µ—Ö–∞–º
    settings.machines.forEach(machine => {
        const workshop = settings.workshops.find(w => w.id === machine.workshopId);
        if (workshop) {
            workshop.machinesCount++;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
async function saveBackup(settings) {
    try {
        const backupDir = path.join(__dirname, 'backups');
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir, { recursive: true });
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFile = path.join(backupDir, `settings-backup-${timestamp}.json`);
        
        const backupData = {
            timestamp: new Date().toISOString(),
            settings: settings
        };

        fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2));
        console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', backupFile);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        await initializeSettingsTables();
        
        app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
            console.log('   GET  /api/settings                 - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            console.log('   POST /api/settings/save            - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            console.log('   GET  /api/settings/distribution    - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
            console.log('   POST /api/settings/import          - –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            console.log('   GET  /api/settings/backups         - –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π');
            console.log('   POST /api/settings/restore         - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            console.log('   GET  /api/health                   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è');
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

startServer();

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('Shutting down settings server...');
    await pool.end();
    console.log('Database connections closed');
    process.exit(0);
});